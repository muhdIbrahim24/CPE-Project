#include <M5Core2.h>
#include <driver/i2s.h>

extern const unsigned char previewR[120264]; // Loading external data file.
#define CONFIG_I2S_BCK_PIN 12
#define CONFIG_I2S_LRCK_PIN 0
#define CONFIG_I2S_DATA_PIN 2
#define CONFIG_I2S_DATA_IN_PIN 34
#define Speak_I2S_NUMBER I2S_NUM_0
#define MODE_MIC 0
#define MODE_SPK 1
#define DATA_SIZE 1024

//Define variables for storing inertial sensor data
float gyroX = 0.0F;
float gyroY = 0.0F;
float gyroZ = 0.0F;
bool alertY = false;


bool InitI2SSpeakOrMic(int mode) { //Init I2S. //Initialising the serial bus 
   esp_err_t err = ESP_OK;
   i2s_driver_uninstall(Speak_I2S_NUMBER); // Uninstall the I2S driver.  
   i2s_config_t i2s_config = {
      .mode = (i2s_mode_t)(I2S_MODE_MASTER), // Set the I2S operating mode.  
      .sample_rate = 44100, // Set the I2S sampling rate.  
      .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT, // Fixed 12-bit stereo MSB.  
      .channel_format = I2S_CHANNEL_FMT_ONLY_RIGHT, // Set the channel format.  
      .communication_format = I2S_COMM_FORMAT_I2S, // Set the format of the communication.  
      .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1, // Set the interrupt flag.  
      .dma_buf_count = 2, //DMA buffer count.  
      .dma_buf_len = 128, //DMA buffer length.  
   };
   if (mode == MODE_MIC) {
      i2s_config.mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_RX | I2S_MODE_PDM);
   } else {
      i2s_config.mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_TX);
      i2s_config.use_apll = false; //I2S clock setup.  
      i2s_config.tx_desc_auto_clear = true; // Enables auto-cleanup descriptors for understreams.  
   }
   // Install and drive I2S.  
   err += i2s_driver_install(Speak_I2S_NUMBER, &i2s_config, 0, NULL);
   i2s_pin_config_t tx_pin_config;
   tx_pin_config.bck_io_num = CONFIG_I2S_BCK_PIN; // Link the BCK to the CONFIG_I2S_BCK_PIN pin. 
   tx_pin_config.ws_io_num = CONFIG_I2S_LRCK_PIN;
   tx_pin_config.data_out_num = CONFIG_I2S_DATA_PIN;
   tx_pin_config.data_in_num = CONFIG_I2S_DATA_IN_PIN;
   err += i2s_set_pin(Speak_I2S_NUMBER, &tx_pin_config); // Set the I2S pin number.  
   err += i2s_set_clk(Speak_I2S_NUMBER, 44100, I2S_BITS_PER_SAMPLE_16BIT, I2S_CHANNEL_MONO); // Set the clock and bitwidth used by I2S Rx and Tx.
   return true;
}

void DisplayInit(void) { // Initialize the display. 
   M5.Lcd.fillScreen(WHITE); //Set the screen background color to white.  
   M5.Lcd.setTextColor(BLACK); //Set the text color to black.  
   M5.Lcd.setTextSize(2); //Set font size to 2.  
}




void SpeakInit(void) { //Initialise the speaker.
   M5.Axp.SetSpkEnable(true); // enables the speaker
   InitI2SSpeakOrMic(MODE_SPK);
}

void DingDong(void) {  //initialise the audio file.
   size_t bytes_written = 0;
   i2s_write(Speak_I2S_NUMBER, previewR, 120264, &bytes_written, portMAX_DELAY);
}

void display(void) { // Initialize the display. 
   M5.Lcd.setTextColor(WHITE); //Set the font color to white.
   M5.Lcd.setTextSize(3); //Set the font size to 3.
   M5.Lcd.setCursor(70, 95); //Move the cursor position to (x, y).
   M5.Lcd.println("Welcome to "); //The screen prints the formatted string and wraps the line.
   M5.Lcd.setCursor(70, 135);
   M5.Lcd.println("Safective!");
}



void dash() {
   M5.begin(true, true, true, true); //Init M5Core2.  
   DisplayInit();
   M5.Lcd.setTextColor(BLACK); //Set the font color to black.  
   M5.Lcd.setTextSize(3); //Set the font size.  
   M5.Lcd.setCursor(75, 10); //Move the cursor position to (x, y).  
   M5.Lcd.println("ATTENTION!"); //The screen prints the formatted string and wraps the line.  
   M5.Lcd.setCursor(35, 75);//Move the cursor position to (x, y). 
   M5.Lcd.println("Press button C");
   M5.Lcd.setTextColor(RED); //Set the font color to red.  
   M5.Lcd.setCursor(35, 105);//Move the cursor position to (x, y). 
   M5.Lcd.println("for 5 seconds");
   M5.Lcd.setTextColor(BLACK); //Set the font color to black.  
   M5.Lcd.setCursor(35, 135);//Move the cursor position to (x, y). 
   M5.Lcd.println("to deactivate");
   M5.Lcd.setCursor(35, 165);//Move the cursor position to (x, y). 
   M5.Lcd.println("the alarm!");
   M5.Lcd.setTextSize(4); //set font size to 4
   M5.Lcd.setTextColor(BLUE);
   M5.Lcd.setCursor(254, 205);//Move the cursor position to (x, y). 
   M5.Lcd.print('C'); // output C for user to press that Button.
   SpeakInit(); // Call both functions DingDong and SpeakInit.
   DingDong();
}

void setup() {
   M5.begin(); //Initialise M5Core. 
   M5.IMU.Init(); //Initialise IMU sensor.  
   M5.IMU.getGyroData( &gyroX, &gyroY, &gyroZ); //read gyro values
   display(); //call display function
}

void loopbeep() {
   if (gyroX > 3.00 || gyroX < -8.0 || gyroY > 10.0 || gyroY < -5.0 || gyroZ > 0.0 || gyroZ < -10.0) { //comparing if read values are within gyro value range.
      alertY = true; // set bool to true
   }
   if (alertY == true) { //calls dash function if bool is true
      dash();
   }
   M5.IMU.getGyroData( &gyroX, &gyroY, &gyroZ); // re-read gyro values.
}

void loop() {
   if (readDeactivate() == false) { //checking if the bool is true or false.
      loopbeep(); //call loopbeep function
   }
   if (readDeactivate() == true) {
      M5.Lcd.fillScreen(BLACK); //Set the screen background color to black.  
      display(); // call display function
   }
}
bool readDeactivate() // boolean function
{
   M5.update(); // update the M5Stack
   if (M5.BtnC.pressedFor(5000)) { //is button C is pressed for 5 seconds, code below is executed.
    alertY = false; // is set to false.
      return true;
   } else if (M5.BtnB.pressedFor(1000) || M5.BtnA.pressedFor(1000)) {
      return false; 
   }
} // end of code.
